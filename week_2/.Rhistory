myapp = oauth_app("jfertest", key = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
sig = sign_oauth1.0(myapp, token = "aa1069dc69d329d8b7fe", token_secret = "98fdf0baaed86ef01eb68389ede1958f1bff5c1f")
library("httr")
myapp = oauth_app("jfertest", key = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
sig = sign_oauth1.0(myapp, token = "aa1069dc69d329d8b7fe", token_secret = "98fdf0baaed86ef01eb68389ede1958f1bff5c1f")
req <- GET("https://api.github.com/users/jleek/repos", sig)
req
myapp = oauth_app("jfertest", key = "aa1069dc69d329d8b7fe", secret = "98fdf0baaed86ef01eb68389ede1958f1bff5c1f")
sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", sig)
REQ
req
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "98fdf0baaed86ef01eb68389ede1958f1bff5c1f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "0b3d5aa19555e7acbafff92e501ed5f99c28eee9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "98fdf0baaed86ef01eb68389ede1958f1bff5c1f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
# Getting and Cleaning Data, Week 2 Quiz
setwd("/Users/fer/Dropbox/Coursera DS/Getting_Cleaning_Data/week_2")
# Question 1:  Register an application with the Github API here https://github.com/settings/applications.
# Access the API to get information on your instructors repositories (hint: this is the url you want
# "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing
# repo was created.  What time was it created?
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "0b3d5aa19555e7acbafff92e501ed5f99c28eee9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
# Question 2:  The sqldf package allows for execution of SQL commands on R
# data frames. We will use the sqldf package to practice the queries we
# might send with the dbSendQuery command in RMySQL.
# Install sqldf package
install.packages("sqldf")
library("sqldf")
# Download the American Community Survey data and load it into an R object called acs
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acscsv <- download.file(url, "acs.csv", method = "curl")
acs <- read.csv("acs.csv", header = T)
# Question 3:  Using the same data frame you created in the previous problem, what is the equivalent
# function to unique(acs$AGEP)
# Answer: sqldf("select distinct AGEP from acs")
# Question 4:  How many characters are in the 10th, 20th, and 100th lines of HTML from this page
library("XML")
url4 <- "http://biostat.jhsph.edu/~jleek/contact.html"
contact <- download.file(url4, "contact.html", method = "curl")
leekparse <- readLines("contact.html")
leek <- leekparse[c(10, 20, 30, 100)]
q4 <- nchar(leek)
# Question 5: Read this data set into R and report the sum of the numbers in the fourth of the nine columns.
# https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
# Original source of the data: http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for
# (Hint this is a fixed-width file format)
url5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file5 <- download.file(url5, "file5.for", method = "curl")
install.packages("foreign")
library("foreign")
noaa <- read("file5.for", header = T)
noaa
install.packages("foreign")
req
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
oauth_endpoints("jfertest")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("jfertest"), myapp)
gtoken < config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("jfertest")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("jfertest"), myapp)
gtoken <- config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "439b41cd5b4b2e113f35d79385f59ab231cf18bd")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "8ea4791a38277e3cc7957d1af2a322d967f9918d")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "8ea4791a38277e3cc7957d1af2a322d967f9918d")
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("jfertest")
oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jleek/repos", gtoken)
req
library("httr")
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "8ea4791a38277e3cc7957d1af2a322d967f9918d")
req <- GET("https://api.github.com/users/:jleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#sig = sign_oauth1.0(myapp, token = "8ea4791a38277e3cc7957d1af2a322d967f9918d")
req <- GET("https://api.github.com/user/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
?oauth_endpoints
library("httr","jsonlite")
json1 <- content(req)
json2 <- jsonlite::fromJSON(to(JSON(json1)))
json2 <- jsonlite::fromJSON(toJSON(json1)))
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
jsonData <- fromJSON(req)
install.packages("jsonlite")
install.packages("jsonlite")
library("httr","jsonlite")
json1 <- content(req)
jsonData <- fromJSON(req)
library("httr","jsonlite")
install.packages(jsonlite)
library("httr",jsonlite)
jsonlite
jsonData <- fromJSON(req)
names(req)
names(req$owner)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
jsonData <- jsonlite::fromJSON("req")
jsonData <- jsonlite::fromJSON(req)
req
jsonData <- jsonlite::fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
names(jsonData)
jsonData <- jsonlite::fromJSON(req)
"https://api.github.com/users/jtleek/repos"
jsonData <- jsonlite::fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData$owner)
names(jsonData$owner$login)
names(jsonData$owner$html_url)
jsonData
names(jsonData)
names(jsonData$id)
names(jsonData$name)
jsonData$owner
jsonData$owner$login
jsonData$name
jsonData$name$datasharing
jsonData$created_at
jsonData$created_at$datasharing
names(jsonData$name)
jsonData$name
jsonData$names
jsonData$name$created_at
jsonData$name[1]
c(jsonData$name, jsonData$created_at)
cbind(jsonData$name, jsonData$created_at)
created_on <- cbind(jsonData$name, jsonData$created_at, colnames = c("repo", "creation date"))
created_on
colnames(created_on) <- c("repo", "created on")
created_on <- cbind(jsonData$name, jsonData$created_at)
colnames(created_on) <- c("repo", "created on")
created_on
datasharing_created_on <- created_on[repo == "datasharing"]
datasharing_created_on <- created_on[created_on$repo == "datasharing"]
datasharing_created_on <- subset(created_on, repo == "datasharing")
datasharing_created_on <- subset(created_on, created_on$repo == "datasharing")
datasharing_created_on <- subset(created_on, created_on[, 1] == "datasharing")
datasharing_created_on
q4
noaa <- read_fwf("file5.for", header = T, sep = "\t")
url5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file5 <- download.file(url5, "file5.for", method = "curl")
install.packages("foreign")
library("foreign")
noaa <- read_fwf("file5.for", header = T, sep = "\t")
noaa
install.packages("foreign")
noaa <- read_fwf("file5.for", header = T, sep = "\t")
noaa
?read.fwf
rep(7, ",")
rep(7, "\,")
rep(7)
rep(7, 7)
noaa <- read_fwf("file5.for", widths = c(9, rep(7,4))
noaa <- read_fwf("file5.for", widths = c(9, rep(7,4)))
install.packages("foreign")
library("foreign")
install.packages("foreign")
noaa <- read_fwf("file5.for", widths = c(9, rep(7,4)))
library("foreign")
noaa <- read_fwf("file5.for", widths = c(9, rep(7,4)))
noaa <- read.fwf("file5.for", widths = c(9, rep(7,4)))
noaa
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7))
noaa
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), sep = "     ")
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), sep = "\     ")
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), sep = "\t")
noaa
?read.fwf
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), header = T, sep = "\t",)
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), skip = 3, header = T, sep = "\t",)
noaa <- read.fwf("file5.for", widths = c(9, 7,7,7,7), skip = 3, sep = "\t",)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(7,4)), skip = 4, sep = "\t",)
noaa <- read.fwf("file5.for", widths = c(9, rep(7,4)), skip = 5, sep = "\t",)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(8,4)), skip = 5, sep = "\t",)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(8,4)), skip = 5, sep = "-",)
noaa <- read.fwf("file5.for", widths = c(9, rep(8,4)), skip = 5)
noaa <- read.fwf("file5.for", widths = c(9, rep(3,4)), skip = 4)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(3,4)), skip = 3)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), skip = 3)
noaa
noaa <- read.fwf("file5.for", widths = c(10, rep(4,8)), skip = 3)
noaa
noaa <- read.fwf("file5.for", widths = c(10, 5, 4, 5, 4, 5, 4, 5), skip = 3)
noaa
noaa <- read.fwf("file5.for", widths = c(10, 5, 4, 5, 4, 5, 4, 4), skip = 3)
noaa
noaa <- read.fwf("file5.for", widths = c(10, 5, 4, 5, 4, 5, 4, 4), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(c(-5, 4, 4), 4), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(c(-5, 4, 4), 4)), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(c(-5, 4, 4), 4)), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(-1, 4, 4), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(-1, 4, 4)), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(-1, 4), 4), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4, 8)), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4, 8)), skip = 4, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4, 8)), skip = 5, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(9, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 5, 4), skip = 5, header = TRUE)
noaa
noaa <- read.fwf("file5.for", widths = c(10, 5, 4, 5, 4, 5, 4, 4), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), skip = 3, sep = "\t")
noaa
noaa <- read.fwf("file5.for", widths = c(10, rep(4,8)), skip = 3, sep = "\t")
noaa
noaa[, -c(2)]
noaa <- read.fwf("file5.for", widths = c(10, 4, 4, 4, 4, 4, 4, 4, 4), skip = 3, sep = "\t", header)
noaa[, -c(2)]
noaa <- read.fwf("file5.for", widths = c(10, 5, 4, 4, 4, 4, 4, 4, 4), skip = 3, sep = "\t", header)
noaa[, -c(2)]
noaa <- read.fwf("file5.for", widths = c(10, 5, 5, 5, 5, 5, 5, 5, 5), skip = 3, sep = "\t", header)
noaa[, -c(2)]
noaa <- read.fwf("file5.for", widths = c(10, 3, 5, 5, 5, 5, 5, 5, 5), skip = 3, sep = "\t", header)
noaa[, -c(2)]
# Getting and Cleaning Data, Week 2 Quiz
setwd("/Users/fer/Dropbox/Coursera DS/Getting_Cleaning_Data/week_2")
# Question 1:  Register an application with the Github API here https://github.com/settings/applications.
# Access the API to get information on your instructors repositories (hint: this is the url you want
# "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing
# repo was created.  What time was it created?
install.packages("jsonlite")
library("httr",jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 <- content(req)
jsonData <- jsonlite::fromJSON("https://api.github.com/users/jtleek/repos")
created_on <- cbind(jsonData$name, jsonData$created_at)
colnames(created_on) <- c("repo", "created on")
datasharing_created_on <- subset(created_on, created_on[, 1] == "datasharing")
# Question 2:  The sqldf package allows for execution of SQL commands on R
# data frames. We will use the sqldf package to practice the queries we
# might send with the dbSendQuery command in RMySQL.
# Install sqldf package
install.packages("sqldf")
library("sqldf")
# Download the American Community Survey data and load it into an R object called acs
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acscsv <- download.file(url, "acs.csv", method = "curl")
acs <- read.csv("acs.csv", header = T)
# Question 3:  Using the same data frame you created in the previous problem, what is the equivalent
# function to unique(acs$AGEP)
# Answer: sqldf("select distinct AGEP from acs")
# Question 4:  How many characters are in the 10th, 20th, and 100th lines of HTML from this page
library("XML")
url4 <- "http://biostat.jhsph.edu/~jleek/contact.html"
contact <- download.file(url4, "contact.html", method = "curl")
leekparse <- readLines("contact.html")
leek <- leekparse[c(10, 20, 30, 100)]
q4 <- nchar(leek)
# Question 5: Read this data set into R and report the sum of the numbers in the fourth of the nine columns.
# https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
# Original source of the data: http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for
# (Hint this is a fixed-width file format)
url5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file5 <- download.file(url5, "file5.for", method = "curl")
install.packages("foreign")
library("foreign")
noaa <- read.fwf("file5.for", widths = c(10, 3, 5, 5, 5, 5, 5, 5, 5), skip = 3, sep = "\t", header)
noaa[, -c(2)]
install.packages("jsonlite")
install.packages("jsonlite")
q1 <- subset(created_on, created_on[, 1] == "datasharing")
print(q1, q2, q3, q4)
# Getting and Cleaning Data, Week 2 Quiz
setwd("/Users/fer/Dropbox/Coursera DS/Getting_Cleaning_Data/week_2")
# Question 1:  Register an application with the Github API here https://github.com/settings/applications.
# Access the API to get information on your instructors repositories (hint: this is the url you want
# "https://api.github.com/users/jtleek/repos"). Use this data to find the time that the datasharing
# repo was created.  What time was it created?
install.packages("jsonlite")
library("httr",jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("jfertest",
key = "aa1069dc69d329d8b7fe",
secret = "cdb338543b67c9da798e946a3fe631a644668c43")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 <- content(req)
jsonData <- jsonlite::fromJSON("https://api.github.com/users/jtleek/repos")
created_on <- cbind(jsonData$name, jsonData$created_at)
colnames(created_on) <- c("repo", "created on")
q1 <- subset(created_on, created_on[, 1] == "datasharing")
# Question 2:  The sqldf package allows for execution of SQL commands on R
# data frames. We will use the sqldf package to practice the queries we
# might send with the dbSendQuery command in RMySQL.
# Install sqldf package
install.packages("sqldf")
library("sqldf")
# Download the American Community Survey data and load it into an R object called acs
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acscsv <- download.file(url, "acs.csv", method = "curl")
acs <- read.csv("acs.csv", header = T)
# Question 3:  Using the same data frame you created in the previous problem, what is the equivalent
# function to unique(acs$AGEP)
q3 <- "Answer: sqldf(\"select distinct AGEP from acs\")"
# Question 4:  How many characters are in the 10th, 20th, and 100th lines of HTML from this page
library("XML")
url4 <- "http://biostat.jhsph.edu/~jleek/contact.html"
contact <- download.file(url4, "contact.html", method = "curl")
leekparse <- readLines("contact.html")
leek <- leekparse[c(10, 20, 30, 100)]
q4 <- nchar(leek)
# Question 5: Read this data set into R and report the sum of the numbers in the fourth of the nine columns.
# https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
# Original source of the data: http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for
# (Hint this is a fixed-width file format)
url5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file5 <- download.file(url5, "file5.for", method = "curl")
install.packages("foreign")
library("foreign")
noaa <- read.fwf("file5.for", widths = c(10, 3, 5, 5, 5, 5, 5, 5, 5), skip = 3, sep = "\t", header)
noaa[, -c(2)]
print(q1, q2, q3, q4)
install.packages("jsonlite")
install.packages("jsonlite")
print(q1, q2, q3, q4)
print(q1, q3, q4)
print(list(q1, q3, q4))
noaa <- read.fwf("file5.for", widths = c(1, 10, rep(4,8)), skip = 3, sep = "\t", header)
noaa
noaa <- read.fwf("file5.for", widths = c(1, 10, rep(4,8)), skip = 3, header)
noaa
noaa <- read.fwf("file5.for", widths = c(1, 10, rep(4,8)), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(1, 9, rep(4,8)), skip = 3, header = T)
noaa
noaa <- read.fwf("file5.for", widths = c(1, 9, rep(4,8)), skip = 3)
noaa
noaa <- read.table("file5.for")
noaa <- read.table("file5.for", skip = 3)
noaa
noaa <- read.table("file5.for", skip = 3, sep = "\t")
noaa
head(noaa)
noaa <- read.fwf(noaa, widths = c(9, rep(4,8)), header = TRUE)
noaa <- read.fwf(noaa, widths = c(9, rep(4,8)), header = TRUE, skip = 5)
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), header = TRUE, skip = 5)
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), header = false, skip = 5)
noaa <- read.fwf("file5.for", widths = c(9, rep(4,8)), header = F, skip = 5)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 1, 3, 5, 4), header = F, skip = 5)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4), header = F, skip = 5)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 4), header = F, skip = 5)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(1, 9, 4, 4, 5, 4, 4), header = F, skip = 5)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 4), header = F, skip = 5)
leek <- leekparse[c(10, 20, 30, 100)]
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 4), header = F, skip = 5)
head(noaa)
rowsum(noaa$V6)
?rowSums
rowSums(noaa$V6)
?rowsum
colSums(noaa$V6)
colsum(noaa$V6)
sum(noaa$V6)
sum(noaa$V5)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 4), header = F, skip = 4)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 1, 3, 5, 4), sep = "\t", header = F, skip = 4)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4), sep = "\t", header = F, skip = 4)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 5), sep = "\t", header = F, skip = 4)
head(noaa)
sum(noaa$V5)
noaa <- read.fwf("file5.for", widths = c(10, 4, 4, 5, 4, 5), sep = "\t", header = F, skip = 4)
head(noaa)
print(list(q1, q3, q4))
noaa <- read.fwf("file5.for", widths = c(10, 4, 4, 5, 4, 5), sep = "\t", header = F, skip = 4)
head(noaa)
noaa <- read.fwf("file5.for", widths = c(15, 4, 4, 5, 4, 5), sep = "\t", header = F, skip = 4)
head(noaa)
print(list(q1, q3, q4, q5))
q5 <- sum(noaa$V5)
print(list(q1, q3, q4, q5))
